apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-api
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: hcloud-volumes
  resources:
    requests:
      storage: 110Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: goat-api
spec:
  replicas: ${API_REPLICAS}
  selector:
    matchLabels:
      app: goat-api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 50%
  minReadySeconds: 15
  template:
    metadata:
      labels:
        app: goat-api
    spec:
      containers:
        - image: ${DOCKER_IMAGE}
          imagePullPolicy: Always
          name: goat-api
          resources:
            requests:
              memory: 1Gi
              cpu: 500m
            limits:
              memory: 4Gi
              cpu: 2
          envFrom:
            - configMapRef:
                name: api-config
          ports:
            - containerPort: 5000
          readinessProbe:
            httpGet:
              path: /api/healthz
              port: 5000
            initialDelaySeconds: 10
            timeoutSeconds: 60
            periodSeconds: 120
            failureThreshold: 3
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /api/healthz
              port: 5000
            initialDelaySeconds: 20
            timeoutSeconds: 60
            periodSeconds: 120
            failureThreshold: 3
          volumeMounts:
            - name: persistent-storage
              mountPath: /app/src/cache
      volumes:
        - name: persistent-storage
          persistentVolumeClaim:
            claimName: pvc-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: goat-worker
spec:
  replicas: ${WORKER_REPLICAS}
  selector:
    matchLabels:
      app: goat-worker
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 50%
  template:
    metadata:
      labels:
        app: goat-worker
    spec:
      containers:
        - image: ${DOCKER_IMAGE}
          command: 
            - "bash"
            - "-c"
            - |
              /etc/init.d/celeryd start
              sleep infinity
          imagePullPolicy: Always
          name: goat-worker
          envFrom:
            - configMapRef:
                name: api-config
          volumeMounts:
            - name: persistent-storage
              mountPath: /app/src/cache
          resources:
            limits:
              memory: ${WORKER_MEMORY_LIMIT}Gi
              cpu: 2
      volumes:
        - name: persistent-storage
          persistentVolumeClaim:
            claimName: pvc-api
---
apiVersion: v1
kind: Service
metadata:
  name: goat-api
spec:
  ports:
    - port: 80
      targetPort: 5000
  type: NodePort
  selector:
    app: goat-api
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-config
  labels:
    app: goat-api
data:
  PROJECT_NAME: goat
  SERVER_NAME: ${DOMAIN}
  SERVER_HOST: https://${DOMAIN}
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
  POSTGRES_SERVER: ${POSTGRES_HOST}
  POSTGRES_DB: ${POSTGRES_DB}
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  SENTRY_DSN: ${SENTRY_DSN}
  NAMESPACE: ${NAMESPACE}
  FIRST_ORGANIZATION: ${FIRST_ORGANIZATION}
  FIRST_SUPERUSER_NAME: ${FIRST_SUPERUSER_NAME}
  FIRST_SUPERUSER_SURNAME: ${FIRST_SUPERUSER_SURNAME}
  FIRST_SUPERUSER_EMAIL: ${FIRST_SUPERUSER_EMAIL}
  FIRST_SUPERUSER_PASSWORD: ${FIRST_SUPERUSER_PASSWORD}
  EMAILS_FROM_EMAIL: ${EMAILS_FROM_EMAIL}
  SMTP_USER: ${EMAILS_FROM_EMAIL}
  SMTP_PASSWORD: ${SMTP_PASSWORD}
  API_SECRET_KEY: ${API_SECRET_KEY}
  R5_HOST: ${R5_HOST}
  R5_AUTHORIZATION: ${R5_AUTHORIZATION}
  CELERYD_OPTS: --concurrency=1 --queues=goat-light-worker
  CELERY_BROKER_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@goat-rabbitmq-service:5672/goat
  CELERY_RESULT_BACKEND: redis://goat-redis-service:6379/0
  CELERY_RESULT_EXPIRES: "\"${CELERY_RESULT_EXPIRES}"\"
  CELERY_TASK_TIME_LIMIT: "\"${CELERY_TASK_TIME_LIMIT}"\"
